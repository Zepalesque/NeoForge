--- a/net/minecraft/client/renderer/RenderType.java
+++ b/net/minecraft/client/renderer/RenderType.java
@@ -19,11 +_,11 @@
 
 @OnlyIn(Dist.CLIENT)
 public abstract class RenderType extends RenderStateShard {
-    public static final int MEGABYTE = 1048576;
+    private static final int MEGABYTE = 1048576;
     public static final int BIG_BUFFER_SIZE = 4194304;
     public static final int SMALL_BUFFER_SIZE = 786432;
     public static final int TRANSIENT_BUFFER_SIZE = 1536;
-    public static final RenderType SOLID = create(
+    private static final RenderType SOLID = create(
         "solid",
         DefaultVertexFormat.BLOCK,
         VertexFormat.Mode.QUADS,
@@ -36,7 +_,7 @@
             .setTextureState(BLOCK_SHEET_MIPPED)
             .createCompositeState(true)
     );
-    public static final RenderType CUTOUT_MIPPED = create(
+    private static final RenderType CUTOUT_MIPPED = create(
         "cutout_mipped",
         DefaultVertexFormat.BLOCK,
         VertexFormat.Mode.QUADS,
@@ -49,7 +_,7 @@
             .setTextureState(BLOCK_SHEET_MIPPED)
             .createCompositeState(true)
     );
-    public static final RenderType CUTOUT = create(
+    private static final RenderType CUTOUT = create(
         "cutout",
         DefaultVertexFormat.BLOCK,
         VertexFormat.Mode.QUADS,
@@ -62,16 +_,16 @@
             .setTextureState(BLOCK_SHEET)
             .createCompositeState(true)
     );
-    public static final RenderType TRANSLUCENT = create(
+    private static final RenderType TRANSLUCENT = create(
         "translucent", DefaultVertexFormat.BLOCK, VertexFormat.Mode.QUADS, 786432, true, true, translucentState(RENDERTYPE_TRANSLUCENT_SHADER)
     );
-    public static final RenderType TRANSLUCENT_MOVING_BLOCK = create(
+    private static final RenderType TRANSLUCENT_MOVING_BLOCK = create(
         "translucent_moving_block", DefaultVertexFormat.BLOCK, VertexFormat.Mode.QUADS, 786432, false, true, translucentMovingBlockState()
     );
-    public static final Function<ResourceLocation, RenderType> ARMOR_CUTOUT_NO_CULL = Util.memoize(
+    private static final Function<ResourceLocation, RenderType> ARMOR_CUTOUT_NO_CULL = Util.memoize(
         p_297924_ -> createArmorCutoutNoCull("armor_cutout_no_cull", p_297924_, false)
     );
-    public static final Function<ResourceLocation, RenderType> ENTITY_SOLID = Util.memoize(
+    private static final Function<ResourceLocation, RenderType> ENTITY_SOLID = Util.memoize(
         p_286159_ -> {
             RenderType.CompositeState rendertype$compositestate = RenderType.CompositeState.builder()
                 .setShaderState(RENDERTYPE_ENTITY_SOLID_SHADER)
@@ -83,7 +_,7 @@
             return create("entity_solid", DefaultVertexFormat.NEW_ENTITY, VertexFormat.Mode.QUADS, 1536, true, false, rendertype$compositestate);
         }
     );
-    public static final Function<ResourceLocation, RenderType> ENTITY_CUTOUT = Util.memoize(
+    private static final Function<ResourceLocation, RenderType> ENTITY_CUTOUT = Util.memoize(
         p_286173_ -> {
             RenderType.CompositeState rendertype$compositestate = RenderType.CompositeState.builder()
                 .setShaderState(RENDERTYPE_ENTITY_CUTOUT_SHADER)
@@ -95,7 +_,7 @@
             return create("entity_cutout", DefaultVertexFormat.NEW_ENTITY, VertexFormat.Mode.QUADS, 1536, true, false, rendertype$compositestate);
         }
     );
-    public static final BiFunction<ResourceLocation, Boolean, RenderType> ENTITY_CUTOUT_NO_CULL = Util.memoize(
+    private static final BiFunction<ResourceLocation, Boolean, RenderType> ENTITY_CUTOUT_NO_CULL = Util.memoize(
         (p_286166_, p_286167_) -> {
             RenderType.CompositeState rendertype$compositestate = RenderType.CompositeState.builder()
                 .setShaderState(RENDERTYPE_ENTITY_CUTOUT_NO_CULL_SHADER)
@@ -108,7 +_,7 @@
             return create("entity_cutout_no_cull", DefaultVertexFormat.NEW_ENTITY, VertexFormat.Mode.QUADS, 1536, true, false, rendertype$compositestate);
         }
     );
-    public static final BiFunction<ResourceLocation, Boolean, RenderType> ENTITY_CUTOUT_NO_CULL_Z_OFFSET = Util.memoize(
+    private static final BiFunction<ResourceLocation, Boolean, RenderType> ENTITY_CUTOUT_NO_CULL_Z_OFFSET = Util.memoize(
         (p_286153_, p_286154_) -> {
             RenderType.CompositeState rendertype$compositestate = RenderType.CompositeState.builder()
                 .setShaderState(RENDERTYPE_ENTITY_CUTOUT_NO_CULL_Z_OFFSET_SHADER)
@@ -124,7 +_,7 @@
             );
         }
     );
-    public static final Function<ResourceLocation, RenderType> ITEM_ENTITY_TRANSLUCENT_CULL = Util.memoize(
+    private static final Function<ResourceLocation, RenderType> ITEM_ENTITY_TRANSLUCENT_CULL = Util.memoize(
         p_286155_ -> {
             RenderType.CompositeState rendertype$compositestate = RenderType.CompositeState.builder()
                 .setShaderState(RENDERTYPE_ITEM_ENTITY_TRANSLUCENT_CULL_SHADER)
@@ -138,7 +_,7 @@
             return create("item_entity_translucent_cull", DefaultVertexFormat.NEW_ENTITY, VertexFormat.Mode.QUADS, 1536, true, true, rendertype$compositestate);
         }
     );
-    public static final Function<ResourceLocation, RenderType> ENTITY_TRANSLUCENT_CULL = Util.memoize(
+    private static final Function<ResourceLocation, RenderType> ENTITY_TRANSLUCENT_CULL = Util.memoize(
         p_286165_ -> {
             RenderType.CompositeState rendertype$compositestate = RenderType.CompositeState.builder()
                 .setShaderState(RENDERTYPE_ENTITY_TRANSLUCENT_CULL_SHADER)
@@ -150,7 +_,7 @@
             return create("entity_translucent_cull", DefaultVertexFormat.NEW_ENTITY, VertexFormat.Mode.QUADS, 1536, true, true, rendertype$compositestate);
         }
     );
-    public static final BiFunction<ResourceLocation, Boolean, RenderType> ENTITY_TRANSLUCENT = Util.memoize(
+    private static final BiFunction<ResourceLocation, Boolean, RenderType> ENTITY_TRANSLUCENT = Util.memoize(
         (p_286156_, p_286157_) -> {
             RenderType.CompositeState rendertype$compositestate = RenderType.CompositeState.builder()
                 .setShaderState(RENDERTYPE_ENTITY_TRANSLUCENT_SHADER)
@@ -163,7 +_,7 @@
             return create("entity_translucent", DefaultVertexFormat.NEW_ENTITY, VertexFormat.Mode.QUADS, 1536, true, true, rendertype$compositestate);
         }
     );
-    public static final BiFunction<ResourceLocation, Boolean, RenderType> ENTITY_TRANSLUCENT_EMISSIVE = Util.memoize(
+    private static final BiFunction<ResourceLocation, Boolean, RenderType> ENTITY_TRANSLUCENT_EMISSIVE = Util.memoize(
         (p_286163_, p_286164_) -> {
             RenderType.CompositeState rendertype$compositestate = RenderType.CompositeState.builder()
                 .setShaderState(RENDERTYPE_ENTITY_TRANSLUCENT_EMISSIVE_SHADER)
@@ -176,7 +_,7 @@
             return create("entity_translucent_emissive", DefaultVertexFormat.NEW_ENTITY, VertexFormat.Mode.QUADS, 1536, true, true, rendertype$compositestate);
         }
     );
-    public static final Function<ResourceLocation, RenderType> ENTITY_SMOOTH_CUTOUT = Util.memoize(
+    private static final Function<ResourceLocation, RenderType> ENTITY_SMOOTH_CUTOUT = Util.memoize(
         p_286169_ -> {
             RenderType.CompositeState rendertype$compositestate = RenderType.CompositeState.builder()
                 .setShaderState(RENDERTYPE_ENTITY_SMOOTH_CUTOUT_SHADER)
@@ -187,7 +_,7 @@
             return create("entity_smooth_cutout", DefaultVertexFormat.NEW_ENTITY, VertexFormat.Mode.QUADS, 1536, rendertype$compositestate);
         }
     );
-    public static final BiFunction<ResourceLocation, Boolean, RenderType> BEACON_BEAM = Util.memoize(
+    private static final BiFunction<ResourceLocation, Boolean, RenderType> BEACON_BEAM = Util.memoize(
         (p_234330_, p_234331_) -> {
             RenderType.CompositeState rendertype$compositestate = RenderType.CompositeState.builder()
                 .setShaderState(RENDERTYPE_BEACON_BEAM_SHADER)
@@ -198,7 +_,7 @@
             return create("beacon_beam", DefaultVertexFormat.BLOCK, VertexFormat.Mode.QUADS, 1536, false, true, rendertype$compositestate);
         }
     );
-    public static final Function<ResourceLocation, RenderType> ENTITY_DECAL = Util.memoize(
+    private static final Function<ResourceLocation, RenderType> ENTITY_DECAL = Util.memoize(
         p_286171_ -> {
             RenderType.CompositeState rendertype$compositestate = RenderType.CompositeState.builder()
                 .setShaderState(RENDERTYPE_ENTITY_DECAL_SHADER)
@@ -211,7 +_,7 @@
             return create("entity_decal", DefaultVertexFormat.NEW_ENTITY, VertexFormat.Mode.QUADS, 1536, rendertype$compositestate);
         }
     );
-    public static final Function<ResourceLocation, RenderType> ENTITY_NO_OUTLINE = Util.memoize(
+    private static final Function<ResourceLocation, RenderType> ENTITY_NO_OUTLINE = Util.memoize(
         p_286160_ -> {
             RenderType.CompositeState rendertype$compositestate = RenderType.CompositeState.builder()
                 .setShaderState(RENDERTYPE_ENTITY_NO_OUTLINE_SHADER)
@@ -225,7 +_,7 @@
             return create("entity_no_outline", DefaultVertexFormat.NEW_ENTITY, VertexFormat.Mode.QUADS, 1536, false, true, rendertype$compositestate);
         }
     );
-    public static final Function<ResourceLocation, RenderType> ENTITY_SHADOW = Util.memoize(
+    private static final Function<ResourceLocation, RenderType> ENTITY_SHADOW = Util.memoize(
         p_286151_ -> {
             RenderType.CompositeState rendertype$compositestate = RenderType.CompositeState.builder()
                 .setShaderState(RENDERTYPE_ENTITY_SHADOW_SHADER)
@@ -241,7 +_,7 @@
             return create("entity_shadow", DefaultVertexFormat.NEW_ENTITY, VertexFormat.Mode.QUADS, 1536, false, false, rendertype$compositestate);
         }
     );
-    public static final Function<ResourceLocation, RenderType> DRAGON_EXPLOSION_ALPHA = Util.memoize(
+    private static final Function<ResourceLocation, RenderType> DRAGON_EXPLOSION_ALPHA = Util.memoize(
         p_286150_ -> {
             RenderType.CompositeState rendertype$compositestate = RenderType.CompositeState.builder()
                 .setShaderState(RENDERTYPE_ENTITY_ALPHA_SHADER)
@@ -251,7 +_,7 @@
             return create("entity_alpha", DefaultVertexFormat.NEW_ENTITY, VertexFormat.Mode.QUADS, 1536, rendertype$compositestate);
         }
     );
-    public static final BiFunction<ResourceLocation, RenderStateShard.TransparencyStateShard, RenderType> EYES = Util.memoize(
+    private static final BiFunction<ResourceLocation, RenderStateShard.TransparencyStateShard, RenderType> EYES = Util.memoize(
         (p_311464_, p_311465_) -> {
             RenderStateShard.TextureStateShard renderstateshard$texturestateshard = new RenderStateShard.TextureStateShard(p_311464_, false, false);
             return create(
@@ -270,7 +_,7 @@
             );
         }
     );
-    public static final RenderType LEASH = create(
+    private static final RenderType LEASH = create(
         "leash",
         DefaultVertexFormat.POSITION_COLOR_LIGHTMAP,
         VertexFormat.Mode.TRIANGLE_STRIP,
@@ -282,7 +_,7 @@
             .setLightmapState(LIGHTMAP)
             .createCompositeState(false)
     );
-    public static final RenderType WATER_MASK = create(
+    private static final RenderType WATER_MASK = create(
         "water_mask",
         DefaultVertexFormat.POSITION,
         VertexFormat.Mode.QUADS,
@@ -293,7 +_,7 @@
             .setWriteMaskState(DEPTH_WRITE)
             .createCompositeState(false)
     );
-    public static final RenderType ARMOR_ENTITY_GLINT = create(
+    private static final RenderType ARMOR_ENTITY_GLINT = create(
         "armor_entity_glint",
         DefaultVertexFormat.POSITION_TEX,
         VertexFormat.Mode.QUADS,
@@ -309,7 +_,7 @@
             .setLayeringState(VIEW_OFFSET_Z_LAYERING)
             .createCompositeState(false)
     );
-    public static final RenderType GLINT_TRANSLUCENT = create(
+    private static final RenderType GLINT_TRANSLUCENT = create(
         "glint_translucent",
         DefaultVertexFormat.POSITION_TEX,
         VertexFormat.Mode.QUADS,
@@ -325,7 +_,7 @@
             .setOutputState(ITEM_ENTITY_TARGET)
             .createCompositeState(false)
     );
-    public static final RenderType GLINT = create(
+    private static final RenderType GLINT = create(
         "glint",
         DefaultVertexFormat.POSITION_TEX,
         VertexFormat.Mode.QUADS,
@@ -340,7 +_,7 @@
             .setTexturingState(GLINT_TEXTURING)
             .createCompositeState(false)
     );
-    public static final RenderType ENTITY_GLINT = create(
+    private static final RenderType ENTITY_GLINT = create(
         "entity_glint",
         DefaultVertexFormat.POSITION_TEX,
         VertexFormat.Mode.QUADS,
@@ -356,7 +_,7 @@
             .setTexturingState(ENTITY_GLINT_TEXTURING)
             .createCompositeState(false)
     );
-    public static final RenderType ENTITY_GLINT_DIRECT = create(
+    private static final RenderType ENTITY_GLINT_DIRECT = create(
         "entity_glint_direct",
         DefaultVertexFormat.POSITION_TEX,
         VertexFormat.Mode.QUADS,
@@ -371,7 +_,7 @@
             .setTexturingState(ENTITY_GLINT_TEXTURING)
             .createCompositeState(false)
     );
-    public static final Function<ResourceLocation, RenderType> CRUMBLING = Util.memoize(
+    private static final Function<ResourceLocation, RenderType> CRUMBLING = Util.memoize(
         p_286174_ -> {
             RenderStateShard.TextureStateShard renderstateshard$texturestateshard = new RenderStateShard.TextureStateShard(p_286174_, false, false);
             return create(
@@ -391,7 +_,7 @@
             );
         }
     );
-    public static final Function<ResourceLocation, RenderType> TEXT = Util.memoize(
+    private static final Function<ResourceLocation, RenderType> TEXT = Util.memoize(
         p_307114_ -> create(
                 "text",
                 DefaultVertexFormat.POSITION_COLOR_TEX_LIGHTMAP,
@@ -407,7 +_,7 @@
                     .createCompositeState(false)
             )
     );
-    public static final RenderType TEXT_BACKGROUND = create(
+    private static final RenderType TEXT_BACKGROUND = create(
         "text_background",
         DefaultVertexFormat.POSITION_COLOR_LIGHTMAP,
         VertexFormat.Mode.QUADS,
@@ -421,7 +_,7 @@
             .setLightmapState(LIGHTMAP)
             .createCompositeState(false)
     );
-    public static final Function<ResourceLocation, RenderType> TEXT_INTENSITY = Util.memoize(
+    private static final Function<ResourceLocation, RenderType> TEXT_INTENSITY = Util.memoize(
         p_307113_ -> create(
                 "text_intensity",
                 DefaultVertexFormat.POSITION_COLOR_TEX_LIGHTMAP,
@@ -437,7 +_,7 @@
                     .createCompositeState(false)
             )
     );
-    public static final Function<ResourceLocation, RenderType> TEXT_POLYGON_OFFSET = Util.memoize(
+    private static final Function<ResourceLocation, RenderType> TEXT_POLYGON_OFFSET = Util.memoize(
         p_286152_ -> create(
                 "text_polygon_offset",
                 DefaultVertexFormat.POSITION_COLOR_TEX_LIGHTMAP,
@@ -454,7 +_,7 @@
                     .createCompositeState(false)
             )
     );
-    public static final Function<ResourceLocation, RenderType> TEXT_INTENSITY_POLYGON_OFFSET = Util.memoize(
+    private static final Function<ResourceLocation, RenderType> TEXT_INTENSITY_POLYGON_OFFSET = Util.memoize(
         p_286175_ -> create(
                 "text_intensity_polygon_offset",
                 DefaultVertexFormat.POSITION_COLOR_TEX_LIGHTMAP,
@@ -471,7 +_,7 @@
                     .createCompositeState(false)
             )
     );
-    public static final Function<ResourceLocation, RenderType> TEXT_SEE_THROUGH = Util.memoize(
+    private static final Function<ResourceLocation, RenderType> TEXT_SEE_THROUGH = Util.memoize(
         p_286158_ -> create(
                 "text_see_through",
                 DefaultVertexFormat.POSITION_COLOR_TEX_LIGHTMAP,
@@ -489,7 +_,7 @@
                     .createCompositeState(false)
             )
     );
-    public static final RenderType TEXT_BACKGROUND_SEE_THROUGH = create(
+    private static final RenderType TEXT_BACKGROUND_SEE_THROUGH = create(
         "text_background_see_through",
         DefaultVertexFormat.POSITION_COLOR_LIGHTMAP,
         VertexFormat.Mode.QUADS,
@@ -505,7 +_,7 @@
             .setWriteMaskState(COLOR_WRITE)
             .createCompositeState(false)
     );
-    public static final Function<ResourceLocation, RenderType> TEXT_INTENSITY_SEE_THROUGH = Util.memoize(
+    private static final Function<ResourceLocation, RenderType> TEXT_INTENSITY_SEE_THROUGH = Util.memoize(
         p_286168_ -> create(
                 "text_intensity_see_through",
                 DefaultVertexFormat.POSITION_COLOR_TEX_LIGHTMAP,
@@ -523,7 +_,7 @@
                     .createCompositeState(false)
             )
     );
-    public static final RenderType LIGHTNING = create(
+    private static final RenderType LIGHTNING = create(
         "lightning",
         DefaultVertexFormat.POSITION_COLOR,
         VertexFormat.Mode.QUADS,
@@ -537,7 +_,7 @@
             .setOutputState(WEATHER_TARGET)
             .createCompositeState(false)
     );
-    public static final RenderType DRAGON_RAYS = create(
+    private static final RenderType DRAGON_RAYS = create(
         "dragon_rays",
         DefaultVertexFormat.POSITION_COLOR,
         VertexFormat.Mode.TRIANGLES,
@@ -550,7 +_,7 @@
             .setTransparencyState(LIGHTNING_TRANSPARENCY)
             .createCompositeState(false)
     );
-    public static final RenderType DRAGON_RAYS_DEPTH = create(
+    private static final RenderType DRAGON_RAYS_DEPTH = create(
         "dragon_rays_depth",
         DefaultVertexFormat.POSITION,
         VertexFormat.Mode.TRIANGLES,
@@ -559,8 +_,8 @@
         false,
         RenderType.CompositeState.builder().setShaderState(RenderStateShard.POSITION_SHADER).setWriteMaskState(DEPTH_WRITE).createCompositeState(false)
     );
-    public static final RenderType TRIPWIRE = create("tripwire", DefaultVertexFormat.BLOCK, VertexFormat.Mode.QUADS, 1536, true, true, tripwireState());
-    public static final RenderType END_PORTAL = create(
+    private static final RenderType TRIPWIRE = create("tripwire", DefaultVertexFormat.BLOCK, VertexFormat.Mode.QUADS, 1536, true, true, tripwireState());
+    private static final RenderType END_PORTAL = create(
         "end_portal",
         DefaultVertexFormat.POSITION,
         VertexFormat.Mode.QUADS,
@@ -577,7 +_,7 @@
             )
             .createCompositeState(false)
     );
-    public static final RenderType END_GATEWAY = create(
+    private static final RenderType END_GATEWAY = create(
         "end_gateway",
         DefaultVertexFormat.POSITION,
         VertexFormat.Mode.QUADS,
@@ -594,8 +_,8 @@
             )
             .createCompositeState(false)
     );
-    public static final RenderType CLOUDS = createClouds(false);
-    public static final RenderType CLOUDS_DEPTH_ONLY = createClouds(true);
+    private static final RenderType CLOUDS = createClouds(false);
+    private static final RenderType CLOUDS_DEPTH_ONLY = createClouds(true);
     public static final RenderType.CompositeRenderType LINES = create(
         "lines",
         DefaultVertexFormat.POSITION_COLOR_NORMAL,
@@ -626,7 +_,7 @@
             .setCullState(NO_CULL)
             .createCompositeState(false)
     );
-    public static final Function<Double, RenderType.CompositeRenderType> DEBUG_LINE_STRIP = Util.memoize(
+    private static final Function<Double, RenderType.CompositeRenderType> DEBUG_LINE_STRIP = Util.memoize(
         p_286162_ -> create(
                 "debug_line_strip",
                 DefaultVertexFormat.POSITION_COLOR,
@@ -640,7 +_,7 @@
                     .createCompositeState(false)
             )
     );
-    public static final RenderType.CompositeRenderType DEBUG_FILLED_BOX = create(
+    private static final RenderType.CompositeRenderType DEBUG_FILLED_BOX = create(
         "debug_filled_box",
         DefaultVertexFormat.POSITION_COLOR,
         VertexFormat.Mode.TRIANGLE_STRIP,
@@ -653,7 +_,7 @@
             .setTransparencyState(TRANSLUCENT_TRANSPARENCY)
             .createCompositeState(false)
     );
-    public static final RenderType.CompositeRenderType DEBUG_QUADS = create(
+    private static final RenderType.CompositeRenderType DEBUG_QUADS = create(
         "debug_quads",
         DefaultVertexFormat.POSITION_COLOR,
         VertexFormat.Mode.QUADS,
@@ -666,7 +_,7 @@
             .setCullState(NO_CULL)
             .createCompositeState(false)
     );
-    public static final RenderType.CompositeRenderType DEBUG_STRUCTURE_QUADS = create(
+    private static final RenderType.CompositeRenderType DEBUG_STRUCTURE_QUADS = create(
         "debug_structure_quads",
         DefaultVertexFormat.POSITION_COLOR,
         VertexFormat.Mode.QUADS,
@@ -681,7 +_,7 @@
             .setWriteMaskState(COLOR_WRITE)
             .createCompositeState(false)
     );
-    public static final RenderType.CompositeRenderType DEBUG_SECTION_QUADS = create(
+    private static final RenderType.CompositeRenderType DEBUG_SECTION_QUADS = create(
         "debug_section_quads",
         DefaultVertexFormat.POSITION_COLOR,
         VertexFormat.Mode.QUADS,
@@ -695,7 +_,7 @@
             .setCullState(CULL)
             .createCompositeState(false)
     );
-    public static final RenderType.CompositeRenderType GUI = create(
+    private static final RenderType.CompositeRenderType GUI = create(
         "gui",
         DefaultVertexFormat.POSITION_COLOR,
         VertexFormat.Mode.QUADS,
@@ -706,7 +_,7 @@
             .setDepthTestState(LEQUAL_DEPTH_TEST)
             .createCompositeState(false)
     );
-    public static final RenderType.CompositeRenderType GUI_OVERLAY = create(
+    private static final RenderType.CompositeRenderType GUI_OVERLAY = create(
         "gui_overlay",
         DefaultVertexFormat.POSITION_COLOR,
         VertexFormat.Mode.QUADS,
@@ -718,7 +_,7 @@
             .setWriteMaskState(COLOR_WRITE)
             .createCompositeState(false)
     );
-    public static final RenderType.CompositeRenderType GUI_TEXT_HIGHLIGHT = create(
+    private static final RenderType.CompositeRenderType GUI_TEXT_HIGHLIGHT = create(
         "gui_text_highlight",
         DefaultVertexFormat.POSITION_COLOR,
         VertexFormat.Mode.QUADS,
@@ -730,7 +_,7 @@
             .setColorLogicState(OR_REVERSE_COLOR_LOGIC)
             .createCompositeState(false)
     );
-    public static final RenderType.CompositeRenderType GUI_GHOST_RECIPE_OVERLAY = create(
+    private static final RenderType.CompositeRenderType GUI_GHOST_RECIPE_OVERLAY = create(
         "gui_ghost_recipe_overlay",
         DefaultVertexFormat.POSITION_COLOR,
         VertexFormat.Mode.QUADS,
@@ -742,12 +_,12 @@
             .setWriteMaskState(COLOR_WRITE)
             .createCompositeState(false)
     );
-    public static final ImmutableList<RenderType> CHUNK_BUFFER_LAYERS = ImmutableList.of(solid(), cutoutMipped(), cutout(), translucent(), tripwire());
-    public final VertexFormat format;
-    public final VertexFormat.Mode mode;
-    public final int bufferSize;
-    public final boolean affectsCrumbling;
-    public final boolean sortOnUpload;
+    private static final ImmutableList<RenderType> CHUNK_BUFFER_LAYERS = ImmutableList.of(solid(), cutoutMipped(), cutout(), translucent(), tripwire());
+    private final VertexFormat format;
+    private final VertexFormat.Mode mode;
+    private final int bufferSize;
+    private final boolean affectsCrumbling;
+    private final boolean sortOnUpload;
 
     public static RenderType solid() {
         return SOLID;
@@ -968,7 +_,7 @@
     }
 
     public static RenderType text(ResourceLocation p_110498_) {
-        return TEXT.apply(p_110498_);
+        return net.neoforged.neoforge.client.NeoForgeRenderTypes.getText(p_110498_);
     }
 
     public static RenderType textBackground() {
@@ -976,19 +_,19 @@
     }
 
     public static RenderType textIntensity(ResourceLocation p_173238_) {
-        return TEXT_INTENSITY.apply(p_173238_);
+        return net.neoforged.neoforge.client.NeoForgeRenderTypes.getTextIntensity(p_173238_);
     }
 
     public static RenderType textPolygonOffset(ResourceLocation p_181445_) {
-        return TEXT_POLYGON_OFFSET.apply(p_181445_);
+        return net.neoforged.neoforge.client.NeoForgeRenderTypes.getTextPolygonOffset(p_181445_);
     }
 
     public static RenderType textIntensityPolygonOffset(ResourceLocation p_181447_) {
-        return TEXT_INTENSITY_POLYGON_OFFSET.apply(p_181447_);
+        return net.neoforged.neoforge.client.NeoForgeRenderTypes.getTextIntensityPolygonOffset(p_181447_);
     }
 
     public static RenderType textSeeThrough(ResourceLocation p_110501_) {
-        return TEXT_SEE_THROUGH.apply(p_110501_);
+        return net.neoforged.neoforge.client.NeoForgeRenderTypes.getTextSeeThrough(p_110501_);
     }
 
     public static RenderType textBackgroundSeeThrough() {
@@ -996,7 +_,7 @@
     }
 
     public static RenderType textIntensitySeeThrough(ResourceLocation p_173241_) {
-        return TEXT_INTENSITY_SEE_THROUGH.apply(p_173241_);
+        return net.neoforged.neoforge.client.NeoForgeRenderTypes.getTextIntensitySeeThrough(p_173241_);
     }
 
     public static RenderType lightning() {
@@ -1122,7 +_,7 @@
         this.sortOnUpload = p_173183_;
     }
 
-    public static RenderType.CompositeRenderType create(
+    static RenderType.CompositeRenderType create(
         String p_173210_, VertexFormat p_173211_, VertexFormat.Mode p_173212_, int p_173213_, RenderType.CompositeState p_173214_
     ) {
         return create(p_173210_, p_173211_, p_173212_, p_173213_, false, false, p_173214_);
@@ -1438,7 +_,7 @@
     }
 
     @OnlyIn(Dist.CLIENT)
-    public static enum OutlineProperty {
+    static enum OutlineProperty {
         NONE("none"),
         IS_OUTLINE("is_outline"),
         AFFECTS_OUTLINE("affects_outline");
@@ -1454,4 +_,17 @@
             return this.name;
         }
     }
+
+    // FORGE START
+    private int chunkLayerId = -1;
+    /** {@return the unique ID of this {@link RenderType} for chunk rendering purposes, or {@literal -1} if this is not a chunk {@link RenderType}} */
+    public final int getChunkLayerId() {
+        return chunkLayerId;
+    }
+    static {
+        int i = 0;
+        for (var layer : chunkBufferLayers())
+            layer.chunkLayerId = i++;
+    }
+    // FORGE END
 }
